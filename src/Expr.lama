-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
    Var (s) -> [c, st (s)]
  | Ref (s) -> [c, Ref(s)]
  | Const (i) -> [c, i]
  | Binop (op, l, r) -> (
    var ll = eval (c, l);
    var rr = eval (ll.fst, r);
    [rr.fst, evalOp(op, ll.snd, rr.snd)]
  )
  | Assn (expr1, expr2) ->
      case eval(c, expr1) of
        [c1, Ref(x)] ->
          case eval(c1, expr2) of
            [c2@[st2, w2], res] -> [[st2 <- [x, res], w2], res]
          esac
      esac
  | Seq (expr1, expr2) -> 
      case eval(c, expr1) of
        [c1, _] -> eval(c1, expr2)
      esac
  | Skip -> [c, Void]
  | Read (s) ->
      case readWorld(w) of
        [res, w] -> [[st <- [s, res], w], Void]
      esac
  | Write (expr) ->
      case eval(c, expr) of
        [c1@[st1, w1], evaled] -> (
          var updatedWorld = writeWorld (evaled, w1);
          [[st1, updatedWorld], Void]
        )
      esac
  | If (cond, trueExpr, falseExpr) ->
      case eval(c, cond) of
        [c1, false] -> eval(c1, falseExpr)
      | [c1, _] -> eval(c1, trueExpr)
      esac
  | While (cond, body) ->
    evalWhile(c, cond, body)
  | DoWhile (body, cond) -> (
    case eval (c, body) of
      [c1, Void] -> evalWhile (c1, cond, body)
    esac
  )
  | Ignore (e) -> [eval(c, e).fst, Void]
  | a -> failure(string(a))
  esac
}

fun evalWhile(c, cond, body) {
  case eval(c, cond) of
    [c1, false] -> [c, Void]
  | [c1, _] ->
      case eval(c1, body) of
        [c2, Void] -> evalWhile(c2, cond, body)
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
