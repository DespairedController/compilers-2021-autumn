-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  var st = c.fst;
  var w = c.snd;
  case stmt of
    Assn (s, expr) -> (
      var result = evalExpr(st, expr);
      var newSt = st <- [s, result];
      [newSt, w]
    )
  | Seq (stmt1, stmt2) -> (
      var c1 = eval (c, stmt1);
      eval (c1, stmt2)
    )
  | Skip -> c
  | Read (s) -> (
      var a = readWorld (w);
      [st <- [s, a.fst], a.snd]
    )
  | Write (expr) -> (
      var value = evalExpr (st, expr);
      var updatedWorld = writeWorld (value, w);
      [st, updatedWorld]
    )
  | If (expr, trueStmt, falseStmt) -> (
    case evalExpr (st, expr) of
      0 -> eval (c, falseStmt)
    | _ -> eval (c, trueStmt)
    esac
  )
  | While (expr, body) -> (
      case evalExpr (st, expr) of
        0 -> c
      | _ -> (
          var evaledBody = eval (c, body);
          eval(evaledBody, stmt)
        )
      esac
  )
  | DoWhile (body, expr) -> (
    var evaledBody = eval(c, body);
    case evalExpr (st, expr) of
      0 -> evaledBody
    | _ -> eval (evaledBody, stmt)
    esac
  )
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
