-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun classicInbr (p) {
  inbr (s ("("), p, s (")"))
}

fun genBinop (op) {
  [s (op), fun (l, o, r) { Binop (op, l, r)}]
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 classicInbr[exp]),
      exp = memo $ eta (
         expr ({
          [Left, {genBinop ("&&"), genBinop ("!!")}],
          [Nona, {genBinop ("<"), genBinop ("<="), genBinop (">"), genBinop (">="), genBinop ("=="), genBinop ("!=")}],
          [Left, {genBinop ("+"), genBinop ("-")}],
          [Left, {genBinop ("*"), genBinop ("/"), genBinop ("%")}]
        }, primary));

var singleStmt = memo $ eta syntax (
  x=lident s[":="] e=exp {Assn (x, e)}     |
  kSkip {Skip}                             |
  kRead x=classicInbr[lident] { Read (x)}  |
  kWrite x=classicInbr[exp] {Write (x)}    |
  parseIf                                  
);

var parseElse = memo $ eta syntax (
  kElse x=stmt kFi {x} |
  kFi {Skip}           |
  kElif x=expr kThen b=stmt els=parseElse {If (x, b, els)}
);

var parseIf = memo $ eta syntax (
  kIf x=exp kThen b=stmt els=parseElse {If (x, b, els)}
);
   
var stmt = memo $ eta syntax (singleStmt | (fst=singleStmt s[";"] snd=stmt { Seq(fst, snd)}));


-- Public top-level parser
public parse = stmt;
