-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun classicInbr (p) {
  inbr (s ("("), p, s (")"))
}

fun genBinop (op) {
  [s (op), fun (l, o, r) { Binop (op, l, r)}]
}

var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 classicInbr[exp]),
      exp = memo $ eta (
         expr ({
          [Left, {genBinop ("&&"), genBinop ("!!")}],
          [Nona, {genBinop ("<"), genBinop ("<="), genBinop (">"), genBinop (">="), genBinop ("=="), genBinop ("!=")}],
          [Left, {genBinop ("+"), genBinop ("-")}],
          [Left, {genBinop ("*"), genBinop ("/"), genBinop ("%")}]
        }, primary));

var elsePart = memo $ eta syntax (
  kElif cond=exp kThen body=stmt elseTail=elsePart {If (cond, body, elseTail)} |
  kElse body=stmt kFi {body}                                                   |
  kFi {Skip}
), 
ifStmt = memo $ eta syntax (
  kIf cond=exp kThen body=stmt elseTail=elsePart {If (cond, body, elseTail)}
),
loopStmt = memo $ eta syntax (
  kWhile cond=exp kDo body=stmt kOd {While (cond, body)}              |
  kDo body=stmt kWhile cond=exp kOd {DoWhile (body, cond)}             |
  kFor init=stmt s[","] cond=exp s[","] step=stmt kDo body=stmt kOd {
    var fullBody = Seq (body, step);
    var whilePart = While (cond, fullBody);
    Seq (init, whilePart)
  }
),
singleStmt = memo $ eta syntax (
  x=lident s[":="] e=exp {Assn (x, e)}            |
  kSkip {Skip}                                    |
  kRead x=inbr[s("("), lident, s(")")] {Read (x)} |
  kWrite e=inbr[s("("), exp, s(")")] {Write (e)}  |
  ifStmt                                          |
  loopStmt
);
   
var stmt = memo $ eta syntax (singleStmt | (fst=singleStmt s[";"] snd=stmt { Seq(fst, snd)}));


-- Public top-level parser
public parse = stmt;