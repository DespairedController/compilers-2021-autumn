-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {} -> c
  | insn : tail -> (
      var c1 = evalCommand(c, insn);
      eval(c1, tail)
    )
  esac
}

fun evalCommand(c, insn) {
  var stack = c[0];
  var state = c[1];
  var world = c[2];

  case insn of
    READ -> (
      var read = readWorld (world);
      [read.fst : stack, state, read.snd]
    )
  | WRITE -> case stack of
      h : t -> [t, state, writeWorld(h, world)]
    esac
  | BINOP (s) -> case stack of
      a : b : t -> [evalBinop(s, b, a) : t, state, world]
      esac
  | LD (x) -> [state (x) : stack, state, world]
  | ST (x) -> case stack of 
      h : t -> (
        [t, state <- [x, h], world]
      )
    esac
  | CONST (s) -> [s : stack, state, world]
  esac

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  getBuffer (compileExprBuffer (expr))
}

fun compileExprBuffer (expr) {
  case expr of
    Var (x) -> singletonBuffer ( LD (x))
  | Const (s) -> singletonBuffer ( CONST (s))
  | Binop (op, a, b) -> (
      var compiledA = compileExprBuffer (a);
      var compiledB = compileExprBuffer (b);
      compiledA <+> compiledB <+ BINOP (op)
    )
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  getBuffer (compileStmtBuffer (stmt)) }


  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | _              -> failure ("compileSM not implemented\n")
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac


fun compileStmtBuffer (stmt) {
  case stmt of
    Assn (s, expr) -> (
      var compiledExpr = compileExprBuffer(expr);
      compiledExpr <+ ST (s)
    )
  | Seq (a, b) -> (
      var compiledA = compileStmtBuffer (a);
      var compiledB = compileStmtBuffer (b);
      compiledA <+> compiledB
    )
  | Skip -> emptyBuffer ()
  | Read (s) -> listBuffer ({READ, ST (s)})
  | Write (expr) -> (
      var compiledExpr = compileExprBuffer (expr);
      compiledExpr <+ WRITE
    )
esac
}