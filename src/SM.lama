-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {} -> c
  | insn : tail -> (
      var c1 = evalCommand(c, insn);
      eval(c1, tail)
    )
  esac
}

fun evalCommand(c, insn) {
  var stack = c[0];
  var state = c[1];
  var world = c[2];

  case insn of
    READ -> (
      var read = readWorld (world);
      [read.fst : stack, state, read.snd]
    )
  | WRITE -> case stack of
      h : t -> [t, state, writeWorld(h, world)]
    esac
  | BINOP (s) -> case stack of
      a : b : t -> [evalBinop(s, b, a) : t, state, world]
      esac
  | LD (x) -> [state (x) : stack, state, world]
  | ST (x) -> case stack of 
      h : t -> (
        [t, state <- [x, h], world]
      )
    esac
  | CONST (s) -> [s : stack, state, world]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  getBuffer (compileExprBuffer (expr))
}

fun compileExprBuffer (expr) {
  case expr of
    Var (x) -> singletonBuffer ( LD (x))
  | Const (s) -> singletonBuffer ( CONST (s))
  | Binop (op, a, b) -> (
      var compiledA = compileExprBuffer (a);
      var compiledB = compileExprBuffer (b);
      compiledA <+> compiledB <+ BINOP (op)
    )
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  getBuffer (compileStmtBuffer (stmt))
}

fun compileStmtBuffer (stmt) {
  case stmt of
    Assn (s, expr) -> (
      var compiledExpr = compileExprBuffer(expr);
      compiledExpr <+ ST (s)
    )
  | Seq (a, b) -> (
      var compiledA = compileStmtBuffer (a);
      var compiledB = compileStmtBuffer (b);
      compiledA <+> compiledB
    )
  | Skip -> emptyBuffer ()
  | Read (s) -> listBuffer ({READ, ST (s)})
  | Write (expr) -> (
      var compiledExpr = compileExprBuffer (expr);
      compiledExpr <+ WRITE
    )
esac
}