-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case insns of
    {} -> c
  | insn : tail -> (
      var c1 = evalCommand(c, insn);
      case c1.snd of
        NEXT -> eval(env, c1.fst, tail)
      | JUMP (label) -> eval(env, c1.fst, fromLabel (env, label))
      | _ -> failure("??? where the label goes %s", c1.snd.string)
      esac
    )
  esac
}

fun evalCommand(c@[stack, state, world], insn) {
  case insn of
    READ -> 
      case readWorld(world) of 
        [x, newWorld] -> [[x:stack, state, newWorld], NEXT]
      esac
  | WRITE -> 
      case stack of
        h : t -> [[t, state, writeWorld(h, world)], NEXT]
      | _ -> failure ("Not enough arguments on stack for WRITE")
      esac
  | BINOP (s) -> 
      case stack of
        a : b : t -> [[evalOp(s, b, a) : t, state, world], NEXT]
      | _ -> failure ("Not enough arguments on stack for BINOP")
      esac
  | LD (x) -> [[state(x) : stack, state, world], NEXT]
  | ST (x) -> 
      case stack of
        h : t -> [[stack, state <- [x, h], world], NEXT]
        | _ -> failure ("Not enough arguments on stack for ST")
      esac
  | CONST (s) -> [[s : stack, state, world], NEXT]
  | LABEL (s) -> [c, NEXT]
  | JMP (label) -> [c, JUMP (label)]
  | CJMP (cond, label) -> (
    case stack of
      head : tail -> (
          if (compare (cond, "z") == 0) == (head == 0) then
            [[tail, state, world], JUMP (label)]
          else
            [[tail, state, world], NEXT]
          fi
        )
      | _ -> failure ("Got empty stack for CJMP")
    esac
  )
  | DROP -> 
    case stack of
      _:tail -> [[tail, state, world], NEXT]
    | _ -> failure ("Got empty stack for DROP")
    esac
  | LDA (x) -> [[Ref (x):stack, state, world], NEXT]
  | STI -> 
    case stack of
      v:Ref (x):tail -> [[v:tail, state <- [x, v], world  ], NEXT]
    | _ -> failure ("Too small stack for STI")
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip          -> [false, env, emptyBuffer ()]
    | Var   (x)     -> [false, env, singletonBuffer (LD (x))]
    | Ref   (x)     -> [false, env, singletonBuffer (LDA (x))]
    | Const (n)     -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)     -> [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
    | Write (e)     -> 
        case env.genLabel of
          [labEnd, env] -> 
            case compile (labEnd, env, e) of
              [used, env, code] -> 
                [
                  false, 
                  env, 
                  code 
                    <+> label (labEnd, used) 
                    <+ WRITE
                ]
            esac
        esac
    | Ignore (e)    ->
        case env.genLabel of
          [lab, env] ->
            case compile (lab, env, e) of
              [labUsed, env, code] -> 
                [
                  false, 
                  env, 
                  code 
                    <+> label (lab, labUsed) 
                    <+ DROP
                ]
            esac
        esac
    | Binop (op, expr1, expr2) ->
        case env.genLabels (2) of
          [labEnd1, labEnd2, env] ->
             case compile (labEnd1, env, expr1) of
               [used1, env, code1] ->
                  case compile (labEnd2, env, expr2) of
                    [used2, env, code2] -> 
                      [
                        false, 
                        env, 
                        code1 
                          <+> label (labEnd1, used1) 
                          <+> code2
                          <+> label (labEnd2, used2) 
                          <+  BINOP (op)
                      ]
                  esac
             esac
        esac
    | Assn (x, e)   -> 
        case env.genLabels (2) of
          [labEndX, labEndE, env] ->
             case compile (labEndX, env, x) of
               [usedX, env, codeX] ->
                  case compile (labEndE, env, e) of
                    [usedE, env, codeE] -> 
                      [
                        false, 
                        env, 
                        codeX 
                          <+> label (labEndX, usedX)
                          <+> codeE 
                          <+> label (labEndE, usedE) 
                          <+  STI
                      ]
                  esac
             esac
        esac  
    | Seq (s1, s2) ->
        case env.genLabel of
          [s2l, env] ->
             case compile (s2l, env, s1) of
               [s2lused, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2l, s2lused) <+> s2Code]
                  esac
             esac
        esac
    | If (cond, t, f) ->
        case env.genLabels (2) of
          [cl, fl, env] ->
             case compile (cl, env, cond) of
               [clused, env, condcode] ->
                  case compile (lab, env, t) of
                    [_, env, tcode] ->
                       case compile (lab, env, f) of
                          [_, env, fcode] -> 
                            [
                              true, 
                              env, 
                              condcode 
                                <+> label (cl, clused)
                                <+  CJMP  ("z", fl)
                                <+> tcode
                                <+  JMP   (lab)
                                <+  LABEL (fl)
                                <+> fcode
                          ]
                       esac
                  esac
             esac
        esac
    | While   (c, body)      ->
        case env.genLabels (3) of
          [labE, labS, labEnd, env] ->
             case compile (labE, env, body) of
               [_, env, bodyCode] -> 
                  case compile (labEnd, env, c) of
                    [used, env, condcode] -> 
                      [
                        false, 
                        env, 
                        singletonBuffer (JMP (labE))
                          <+  LABEL (labS)
                          <+> bodyCode
                          <+  LABEL (labE)
                          <+> condcode
                          <+> label (labEnd, used)
                          <+  CJMP  ("nz", labS)
                        ]
                  esac
             esac
        esac
    | DoWhile (body, c)      ->
        case env.genLabels (3) of
          [labS, labE, labEnd, env] ->
             case compile (labE, env, body) of
               [usedE, env, bodyCode] -> 
                  case compile (labEnd, env, c) of
                    [usedEnd, env, condCode] -> 
                      [
                        false, 
                        env, 
                        singletonBuffer(LABEL (labS))
                          <+> bodyCode
                          <+  LABEL (labE)
                          <+> condCode
                          <+> label (labEnd, usedEnd)
                          <+  CJMP  ("nz", labS)
                      ]
                  esac
             esac
        esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}